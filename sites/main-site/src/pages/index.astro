---
import Layout from '../../../../packages/shared/Layout.astro';
import { getCollection } from 'astro:content';
import PostCard from '../../../../packages/shared/PostCard.astro';
import Label from '../../../../packages/shared/Label.astro';
import { getPostTypeById } from '../../../../packages/shared/postTypes';

const caseStudies = await getCollection('work');
const sortedCaseStudies = caseStudies.sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

// Get unique types present in content and their display labels
const uniqueTypeIds = [...new Set(caseStudies.map((study) => study.data.type))];
const availableTypes = uniqueTypeIds
  .map((id) => getPostTypeById(id))
  .filter(Boolean)
  .sort((a, b) => a.label.localeCompare(b.label));
---

<Layout title="Katie Langerman" siteType="main">
  <main>
    <section class="intro">
      <p>I'm a Staff Systems designer at GitHub, shipping code and nudging pixels for the <a href="https://primer.style/">Primer design system.</a></p>
      <p>I enjoy flexing into different domains. If there's something that needs doing, I'll do it.</p>
      <p>
        I co-host an interface design podcast called <a href="https://creators.spotify.com/pod/show/complementary">Complementary</a>, and off screen I'm teaching myself interior design and slowly renovating my house.
      </p>
    </section>

    <section class="work">
      <div class="filter-label-list">
        <ol class="label-list">
          <!-- <li>Filter by:</li> -->
          <li>
            <Label type="all" href="#" />
          </li>
          {availableTypes.map((type) => (
            <li>
              <Label type={type.id} href="#" />
            </li>
          ))}
        </ol>
      </div>

      <div class="post-index" id="post-container">
        {
          sortedCaseStudies.map((study) => (
            <PostCard
              title={study.data.title}
              date={study.data.date}
              thumbnail={study.data.thumbnail}
              description={study.data.description}
              hasMore={study.data.hasMore}
              slug={study.slug}
              linkPrefix="/work"
              type={study.data.type}
              externalUrl={study.data.externalUrl}
            />
          ))
        }
      </div>
    </section>
  </main>
</Layout>

<script>
  class PostFilter {
    constructor() {
      this.container = document.getElementById('post-container');
      this.cards = Array.from(document.querySelectorAll('.card[data-type]'));
      this.labelLinks = Array.from(document.querySelectorAll('.label-list a.label'));

      this.init();
    }

    init() {
      if (!this.container) return;

      // Set unique view transition names for each card
      let cardIndex = 0;
      this.cards.forEach((card) => {
        card.style.viewTransitionName = `post-${++cardIndex}`;
      });

      // Label link filters
      this.labelLinks.forEach(link => {
        link.addEventListener('click', (e) => {
          e.preventDefault();
          const selectedType = link.dataset.type;
          this.handleFilterChange(selectedType, () => {
            this.updateActiveLabel(link);
          });
        });
      });
    }

    handleFilterChange(selectedType, updateUI) {
      // Check if View Transitions API is supported
      if (!document.startViewTransition) {
        updateUI();
        this.filterPosts(selectedType);
        this.updateURL(selectedType);
        return;
      }

      // Use View Transitions API
      document.startViewTransition(() => {
        updateUI();
        this.filterPosts(selectedType);
        this.updateURL(selectedType);
      });
    }

    updateActiveLabel(activeLink) {
      // Remove aria-current from all labels
      this.labelLinks.forEach(link => {
        link.removeAttribute('aria-current');
      });
      // Add aria-current to clicked label
      activeLink.setAttribute('aria-current', 'page');
    }

    filterPosts(selectedType) {
      this.cards.forEach((card) => {
        const cardType = card.getAttribute('data-type');

        // Check if card matches filter
        if (selectedType === 'all' || selectedType === cardType) {
          card.removeAttribute('hidden');
        } else {
          card.setAttribute('hidden', '');
        }
      });
    }

    updateURL(selectedType) {
      const url = new URL(window.location.href);
      if (selectedType === 'all') {
        url.searchParams.delete('type');
      } else {
        url.searchParams.set('type', selectedType);
      }
      window.history.replaceState({}, '', url);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const postFilter = new PostFilter();

    // Handle initial filter from URL
    const urlParams = new URLSearchParams(window.location.search);
    const typeParam = urlParams.get('type') || 'all';

    // Set initial aria-current for label links AND filter the posts
    const activeLabel = document.querySelector(`.label-list a.label[data-type="${typeParam}"]`);
    if (activeLabel) {
      postFilter.updateActiveLabel(activeLabel);
    }

    // Always filter the posts based on the URL parameter (even if activeLabel is null)
    postFilter.filterPosts(typeParam);
  });
</script>
