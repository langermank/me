---
import Label from './Label.astro';
import { Image } from 'astro:assets';

export interface Props {
  title: string;
  date?: Date;
  thumbnail?: string;
  description: string;
  hasMore: boolean;
  slug: string;
  type?: string; // Optional type for filtering
  externalUrl?: string; // Optional external URL for the title
  darkThumbnail?: any; // Dark thumbnail image upload from Strapi
  emphasizeTitle?: boolean;
  hideDate?: boolean;
}

const { title, date, thumbnail, description, hasMore, slug, type, externalUrl, darkThumbnail, emphasizeTitle, hideDate } = Astro.props;

// Handle type - could be a string (from MDX) or an object (from Strapi relation)
const typeValue = typeof type === 'string' ? type : type?.name || type?.displayName;

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
  }).format(date);
};

// Create slug from title if slug is not available
const createSlug = (title) => {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, '-')
    .replace(/^-|-$/g, '');
};

const postSlug = slug || createSlug(title);
const postUrl = `/${postSlug}`;
---

<article class="card" data-type={typeValue}>
  {emphasizeTitle ? (
    <div class="card-title">
      <div class="label-container">
        {typeValue && <Label type={typeValue} />}
        {
          externalUrl ? (
            <h3>
              <a href={externalUrl} target="_blank" rel="noopener noreferrer" class="external-link">
                {title}
              </a>
            </h3>
          ) : hasMore ? (
            <h3>
              <a href={postUrl} class="read-more">
                {title}
              </a>
            </h3>
          ) : (
            <h3>{title}</h3>
          )
        }
      </div>
      {!hideDate && <time datetime={date.toISOString()}>{formatDate(date)}</time>}
    </div>
  ) : (
    <div class="card-title">
      {!hideDate && <time datetime={date.toISOString()}>{formatDate(date)}</time>}
      <div class="label-container">
        {typeValue && <Label type={typeValue} />}
        {
          externalUrl ? (
            <h3>
              <a href={externalUrl} target="_blank" rel="noopener noreferrer" class="external-link">
                {title}
              </a>
            </h3>
          ) : hasMore ? (
            <h3>
              <a href={postUrl} class="read-more">
                {title}
              </a>
            </h3>
          ) : (
            <h3>{title}</h3>
          )
        }
      </div>
    </div>
  )}
  <p>{description}</p>
  {
    thumbnail && (
      <div class="thumbnail">
        {darkThumbnail ? (
            <div class="thumbnail-container">
              <img
                src={
                  typeof thumbnail === 'string'
                    ? thumbnail
                    : thumbnail?.url || thumbnail?.data?.attributes?.url
                }
                alt={title}
                loading="lazy"
                class="thumbnail-light"
              />
              <img
                src={
                  typeof darkThumbnail === 'string'
                    ? darkThumbnail
                    : darkThumbnail?.url || darkThumbnail?.data?.attributes?.url
                }
                alt={title}
                loading="lazy"
                class="thumbnail-dark"
              />
            </div>
          ) : (
            <img
              src={
                typeof thumbnail === 'string'
                  ? thumbnail
                  : thumbnail?.url || thumbnail?.data?.attributes?.url
              }
              alt={title}
              loading="lazy"
            />
          )
        }
      </div>
    )
  }
</article>
